# ---------------------------------------------------------------------------------------------
# MIT License
# Copyright (c) 2020, Solace Corporation, Ricardo Gomez-Ulmke (ricardo.gomez-ulmke@solace.com)
# ---------------------------------------------------------------------------------------------

name: Standup Azure Controller
on:
  workflow_dispatch:
    inputs:
      controller_id:
          description: "unique controller id"
          required: true
          default: t1
      azure_location:
          description: "azure location / region"
          required: true
          default: "westeurope"
      zone:
          description: "azure availability zone"
          required: true
          default: "1"
      vm_admin_username:
          description: "vm admin username"
          required: true
          default: "controller"
      azure_key_vault_name:
          description: "name of the azure key vault"
          required: true
          default: "solace-ci-controller-kv"
      vm_admin_public_key_secret_name:
          description: "public key name in key vault"
          required: true
          default: "vm-admin-public-key"
      vm_admin_private_key_secret_name:
          description: "private key name in key vault"
          required: true
          default: "vm-admin-private-key"

env:
  PROJECT_PREFIX: '${{github.event.inputs.controller_id}}-solace-ci-controller'
  AZURE_RESOURCE_GROUP: '${{github.event.inputs.controller_id}}-solace-ci-controller-rg'
  AZURE_DEPLOY_ARM_TEMPLATE: ./azure/.workflows/azure-deploy.json
  BOOTSTRAP_SH: ./azure/.workflows/bootstrap.sh
  KEY_FILE: ./azure_key  
jobs:
  create_vm:
    runs-on: ubuntu-18.04
    outputs:
      publicIpAddress: ${{steps.azure_deploy.outputs.publicIPAddress}}
      resourceGroupName: ${{steps.azure_deploy.outputs.resourceGroupName}}
    steps:
      # - name: Test Env Json Var
      #   env: 
      #     vmPublicKeyParam: '{"reference":{"keyVault":{"id":"/subscriptions/${{secrets.AZURE_SUBSCRIPTION_ID}}/resourceGroups/${{env.AZURE_RESOURCE_GROUP}}/providers/Microsoft.KeyVault/vaults/${{github.event.inputs.azure_key_vault_name}}"},"secretName":"${{github.event.inputs.vm_admin_public_key_secret_name}}"}}'
      #   run: |
      #     echo "vmPublicKeyParam= '$vmPublicKeyParam'"
      #     # ${{fromJson(env.vmPublicKeyParam)}}

      # - name: "DEBUG: STOP WORKFLOW"
      #   run: exit 1

      - name: Checkout Repository
        uses: actions/checkout@master
      - name: "TESTS: List Files after checkout"
        run: |
          pwd
          ls -a
          echo "GITHUB_SHA=$GITHUB_SHA"
          echo "GITHUB_REPOSITORY=$GITHUB_REPOSITORY"
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          echo "GITHUB_REF=$GITHUB_REF"
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}"
          echo "github.token=${{ github.token }}"
      - name: Generate Public/Private Key for Controller VM
        run: |
          ssh-keygen -t rsa -N '' -f ${KEY_FILE} <<< y 
      - name: Azure Login
        # https://github.com/marketplace/actions/azure-login
        uses: azure/login@v1.1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}
      - name: "TEST: List all resource groups in specified location"
        run: |
          az group list --query "[?location=='${{github.event.inputs.azure_location}}']"
      - name: Create Azure Resource Group
        run: |
          az group create \
            --name ${AZURE_RESOURCE_GROUP} \
            --location ${{github.event.inputs.azure_location}} \
            --tags project=${PROJECT_PREFIX} \
            --verbose
      
      - name: Create Azure Key Vault
        run: |
          az keyvault create \
            --name ${{github.event.inputs.azure_key_vault_name}} \
            --resource-group ${AZURE_RESOURCE_GROUP} \
            --location ${{github.event.inputs.azure_location}} \
            --tags project=${PROJECT_PREFIX} \
            --enabled-for-template-deployment true \
            --verbose

      - name: Set Azure Key Vault Secret - vm public key
        run: |
          az keyvault secret set \
            --vault-name ${{github.event.inputs.azure_key_vault_name}} \
            --name ${{github.event.inputs.vm_admin_public_key_secret_name}} \
            --file ${KEY_FILE}.pub \
            --verbose
      
      - name: Set Azure Key Vault Secret - vm private key
        run: |
          az keyvault secret set \
            --vault-name ${{github.event.inputs.azure_key_vault_name}} \
            --name ${{github.event.inputs.vm_admin_private_key_secret_name}} \
            --file ${KEY_FILE} \
            --verbose

      - name: Create ARM Parameters
        id: arm_params  
        run: |
            echo "::set-output name=simpleString::hello world"  
            echo '::set-output name=simpleJson::{"hello":"world"}'

            value='
            {
              "reference": {
                "keyVault": {
                  "id": "/subscriptions/837ffe8b-4d6f-4611-908e-bbfd4106a53a/resourceGroups/c1-solace-ci-controller-rg/providers/Microsoft.KeyVault/vaults/c1-solace-ci-controller"
                },
                "secretName": "vm-admin-public-key"
              }
            }
            '
            # echo '::set-output name=vmPublicKeyParam::$value'  

            echo "vmPublicKeyParam=$value" >> $GITHUB_ENV

      - name: Print arm_params      
        run: |
          echo "steps.arm_params.outputs:"
          echo "${{toJson(steps.arm_params.outputs)}}"
          echo "vmPublicKeyParam= '$vmPublicKeyParam'"
          echo "toJson(vmPublicKeyParam):"
          echo "${{toJson($vmPublicKeyParam)}}"

        
      - name: "DEBUG: STOP WORKFLOW"
        run: exit 1


      - name: Run ARM Deploy
        env: 
          vmPublicKeyParam: '{"reference":{"keyVault":{"id":"/subscriptions/${{secrets.AZURE_SUBSCRIPTION_ID}}/resourceGroups/${{env.AZURE_RESOURCE_GROUP}}/providers/Microsoft.KeyVault/vaults/${{github.event.inputs.azure_key_vault_name}}"},"secretName":"${{github.event.inputs.vm_admin_public_key_secret_name}}"}}'
        id: azure_deploy
        # https://github.com/marketplace/actions/deploy-azure-resource-manager-arm-template
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: ${{env.AZURE_RESOURCE_GROUP}}
          template: ${{env.AZURE_DEPLOY_ARM_TEMPLATE}}
          # parameters: id=${{github.event.inputs.controller_id}} zone=${{github.event.inputs.zone}} vm_admin_username=${{github.event.inputs.vm_admin_username}} vm_admin_public_key=${{github.event.inputs.vm_admin_public_key}}
          parameters: vm_admin_public_key=${{fromJson(env.vmPublicKeyParam)}} id=${{github.event.inputs.controller_id}} zone=${{github.event.inputs.zone}} vm_admin_username=${{github.event.inputs.vm_admin_username}} 
      - name: "TEST: show the deploy output"
        run: |
          echo "outputs:"
          echo "${{toJson(steps.azure_deploy.outputs)}}"
  bootstrap_vm:
      runs-on: ubuntu-18.04
      needs: create_vm
      env:
        VM_PUBLIC_IP_ADDRESS: ${{needs.create_vm.outputs.publicIpAddress}}
        VM_USER_NAME: ${{github.event.inputs.vm_admin_username}}
        VM_PASSWORD: ${{github.event.inputs.vm_admin_password}}
      steps:
        - name: Checkout Repository
          uses: actions/checkout@master
        - name: "TEST: show the create_vm output"
          run: |
            echo "outputs from create_vm:"
            echo "publicIpAddress = ${VM_PUBLIC_IP_ADDRESS}"
            echo "resourceGroupName = ${{needs.create_vm.outputs.resourceGroupName}}"
        - name: Copy bootstrap script
          # https://github.com/garygrossgarten/github-action-scp
          # no error handling: workflow will not fail on error
          uses: garygrossgarten/github-action-scp@release
          with:
            local: ${{env.BOOTSTRAP_SH}}
            remote: bootstrap.sh
            host: ${{env.VM_PUBLIC_IP_ADDRESS}}
            username: ${{env.VM_USER_NAME}}
            password: ${{env.VM_PASSWORD}}
        - name: Execute bootstrap script
          # https://blog.benoitblanchon.fr/github-action-run-ssh-commands/
          uses: garygrossgarten/github-action-ssh@release
          with:
            command: |
              chmod u+x bootstrap.sh
              ./bootstrap.sh
            host: ${{env.VM_PUBLIC_IP_ADDRESS}}
            username: ${{env.VM_USER_NAME}}
            password: ${{env.VM_PASSWORD}}


###
# The End.
