# ---------------------------------------------------------------------------------------------
# MIT License
# Copyright (c) 2020, Solace Corporation, Ricardo Gomez-Ulmke (ricardo.gomez-ulmke@solace.com)
# ---------------------------------------------------------------------------------------------

name: Standup Azure Controller
on:
  workflow_dispatch:
    inputs:
      controller_id:
          description: "the unique controller id"
          required: true
          default: t1
      azure_location:
          description: "azure location / region"
          required: true
          default: "westeurope"
      zone:
          description: "the availability zone"
          required: true
          default: "1"
      vm_admin_username: 
          description: "the vm admin username"
          required: true
          default: "controller"
      vm_admin_password:
          description: "the vm admin password"
          required: true
          default: "Controller-Solace-123"

jobs: 
  test:
    runs-on: ubuntu-18.04
    steps:
      - name: Print Inputs
        run: |
          echo "inputs=${{toJson(github.event.inputs)}}"
  deploy:
    runs-on: ubuntu-18.04
    env:
      PROJECT_PREFIX: '${{github.event.inputs.controller_id}}-solace-ci-controller'
      AZURE_RESOURCE_GROUP: '${{github.event.inputs.controller_id}}-solace-ci-controller-rg'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@master
      - name: "TESTS: List Files after checkout"
        run: |
          pwd
          ls -a
          echo "GITHUB_SHA=$GITHUB_SHA"
          echo "GITHUB_REPOSITORY=$GITHUB_REPOSITORY"
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          echo "GITHUB_REF=$GITHUB_REF"
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}"
          echo "github.token=${{ github.token }}"  
      - name: Azure Login
        # https://github.com/marketplace/actions/azure-login
        uses: azure/login@v1.1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}
      - name: "TEST: List all resource groups in specified location"
        run: |
          az group list --query "[?location=='${{github.event.inputs.azure_location}}']"
      - name: Create Resource Group    
        run: |
          az group create \
            --name ${AZURE_RESOURCE_GROUP} \
            --location ${{github.event.inputs.azure_location}} \
            --tags project=${PROJECT_PREFIX} \
            --verbose
      - name: Run ARM Deploy
        id: azure_deploy
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: ${{env.AZURE_RESOURCE_GROUP}}
          template: ./azure/azure-deploy.json
          # parameters: id=${{github.event.inputs.controller_id}} azLocation=${{github.event.inputs.azure_location}} zone=${{github.event.inputs.zone}} vm_admin_username=${{github.event.inputs.vm_admin_username}} vm_admin_password=${{github.event.inputs.vm_admin_password}}
          # rgName=demoResourceGroup rgLocation=centralus
          parameters: |
            id=${{github.event.inputs.controller_id}} 
            zone=${{github.event.inputs.zone}} 
            vm_admin_username=${{github.event.inputs.vm_admin_username}} 
            vm_admin_password=${{github.event.inputs.vm_admin_password}}
      - name: "TEST: show the deploy output"
        run: |
          echo "outputs=${{toJson(github.azure_deploy.outputs)}}"


    # - ARM Template:
    #     - https://github.com/marketplace/actions/deploy-azure-resource-manager-arm-template
    #     - capture output for SSH
    #         - retrieve the file ==> I want to use it manually
    #     - capture IP address

    #       but then: how do I capture the state?
    #       --> artefacts?


# checkout repo

# create the parameters file:
  # .workflow-state
    # create.parameters.json

# call create.sh ./.workflow-state/create.parameters.json



###
# The End.