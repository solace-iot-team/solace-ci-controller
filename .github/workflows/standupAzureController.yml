# ---------------------------------------------------------------------------------------------
# MIT License
# Copyright (c) 2020, Solace Corporation, Ricardo Gomez-Ulmke (ricardo.gomez-ulmke@solace.com)
# ---------------------------------------------------------------------------------------------

name: Standup Azure Controller
on:
  workflow_dispatch:
    inputs:
      controller_id:
          description: "unique controller id"
          required: true
          default: w1
      azure_location:
          description: "azure location / region"
          required: true
          default: "westeurope"
      zone:
          description: "azure availability zone"
          required: true
          default: "1"
      vm_admin_username:
          description: "vm admin username"
          required: true
          default: "controller"
      vm_pub_key:
          description: "testing pub key"
          required: true
          default: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCoii+97+HRgAP8I8cQEdJ9B4XapMS/OIH4N080aGaiQiN8FUff1569iUIdWSuSjCYdGIsjeSXMzXXlR+WPj0IpAWmKcwkqBJoKdJzH+jXJSWgcXwEZCQDUbZukBBHXvXyI8a5AA0KPoD2l1C+FIHWKEvNlw4zl0aHdikQ357iygbSbmuGjxPa8CoYYTPGz+gU1pIQSbXxiKgJrTfJPP4LZaPD11rWQLm14vKH/edH6OADdfURn9XWY87qTIYfjs7thyYw7TiG3xeMISngPmQIcjV+RPuPUHjQfnIdae8W5KRytJudq2g2FREoTo2bxzUPXc2IKmA0vcXohQrR3rkA8p0Xv+Alq1WoLGJZqYNRndGTc6m8prc+WsRs8KcQzdc+vvm/3IWqkU0793uGuE2+uNHtslNpFt0/3JWEWMpQHLwnJdUuN3xRp4e38SBr/1eDAtFgG4PnsnvArNigXmA9zZUr+iGAKfuamGJpQ8NhCE5iNvweVLv6N8ZT2QUgsRWM= rjgu@Ricardos-MacBook-Pro.local"

env:
  PROJECT_PREFIX: '${{github.event.inputs.controller_id}}-solace-ci-controller'
  AZURE_RESOURCE_GROUP: '${{github.event.inputs.controller_id}}-solace-ci-controller-rg'
  AZURE_DEPLOY_ARM_TEMPLATE: ./azure/.workflows/azure-deploy.json
  BOOTSTRAP_SH: ./azure/.workflows/bootstrap.sh
  KEY_FILE: ./azure_key  
  PARAMTERS_TEMPLATE_FILE: ./azure/.workflows/template.azure-deploy.parameters.json
  PARAMETERS_FILE: ./azure/.workflows/azure-deploy.parameters.json

jobs:
  create_vm:
    runs-on: ubuntu-18.04
    outputs:
      publicIpAddress: ${{steps.azure_deploy.outputs.publicIPAddress}}
      resourceGroupName: ${{steps.azure_deploy.outputs.resourceGroupName}}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@master
      # - name: "TESTS: List Files after checkout"
      #   run: |
      #     pwd
      #     ls -a
      #     echo "GITHUB_SHA=$GITHUB_SHA"
      #     echo "GITHUB_REPOSITORY=$GITHUB_REPOSITORY"
      #     echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
      #     echo "GITHUB_REF=$GITHUB_REF"
      #     echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}"
      #     echo "github.token=${{ github.token }}"
      - name: Generate Parameters File
        run: |
          parametersJson=$(cat ${PARAMTERS_TEMPLATE_FILE} | jq .)
          echo parametersJson=$parametersJson
          export id=${{github.event.inputs.controller_id}}
            parametersJson=$( echo $parametersJson | jq -r '.parameters.id.value=env.id' )
          export zone=${{github.event.inputs.zone}}
            parametersJson=$( echo $parametersJson | jq -r '.parameters.zone.value=env.zone' )
          export vm_admin_username=${{github.event.inputs.vm_admin_username}}
            parametersJson=$( echo $parametersJson | jq -r '.parameters.vm_admin_username.value=env.vm_admin_username' )
          export vm_admin_public_key="${{ secrets.CONTROLLER_VM_PUBLIC_KEY }}"
            parametersJson=$( echo $parametersJson | jq -r '.parameters.vm_admin_public_key=env.vm_admin_public_key' )

          echo $parametersJson | jq . > ${PARAMETERS_FILE}    

      # - name: Show Parameters File
      #   run: |
      #     cat ${PARAMETERS_FILE}

      - name: Azure Login
        # https://github.com/marketplace/actions/azure-login
        uses: azure/login@v1.1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}

      # - name: "TEST: List all resource groups in specified location"
      #   run: |
      #     az group list --query "[?location=='${{github.event.inputs.azure_location}}']"

      - name: Create Azure Resource Group
        run: |
          az group create \
            --name ${AZURE_RESOURCE_GROUP} \
            --location ${{github.event.inputs.azure_location}} \
            --tags project=${PROJECT_PREFIX} \
            --verbose
      
      - name: Run ARM Deploy
        id: azure_deploy
        # https://github.com/marketplace/actions/deploy-azure-resource-manager-arm-template
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          template: ${{ env.AZURE_DEPLOY_ARM_TEMPLATE }}
          parameters: id=${{ github.event.inputs.controller_id }} zone=${{ github.event.inputs.zone }} vm_admin_username=${{ github.event.inputs.vm_admin_username }} vm_admin_public_key='${{ github.event.inputs.vm_pub_key }}'
          # parameters: id=${{ github.event.inputs.controller_id }} zone=${{ github.event.inputs.zone }} vm_admin_username=${{ github.event.inputs.vm_admin_username }} vm_admin_public_key='${{ secrets.CONTROLLER_VM_PUBLIC_KEY }}'
          # parameters: ${{env.PARAMETERS_FILE}}

      - name: "TEST: show the deploy output"
        run: |
          echo "outputs:"
          echo "${{toJson(steps.azure_deploy.outputs)}}"

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${SSH_KEY}" > ~/.ssh/controller_key
          chmod 600 ~/.ssh/controller_key
          cat >>~/.ssh/config <<END
          Host controller
            HostName ${SSH_HOST}
            User ${SSH_USER}
            IdentityFile ~/.ssh/controller_key
            StrictHostKeyChecking no
          END
          chmod 600 ~/.ssh/config
          
          cat ~/.ssh/config

        env:
          SSH_USER: ${{ github.event.inputs.vm_admin_username }}
          SSH_KEY: ${{ secrets.CONTROLLER_VM_PRIVATE_KEY }}
          SSH_HOST: ${{ steps.azure_deploy.outputs.publicIPAddress }}

      - name: RUN ssh command
        run: |
          ssh controller "ls -la && pwd"
    
      - name: RUN ssh command
        run: |
          ssh controller "\
            ls -la && \
            pwd
          "

      - name: "DEBUG: STOP WORKFLOW"
        run: exit 1
      

  bootstrap_vm:
      runs-on: ubuntu-18.04
      needs: create_vm
      env:
        VM_PUBLIC_IP_ADDRESS: ${{needs.create_vm.outputs.publicIpAddress}}
        VM_USER_NAME: ${{github.event.inputs.vm_admin_username}}
        VM_PASSWORD: ${{github.event.inputs.vm_admin_password}}
      steps:
        - name: Checkout Repository
          uses: actions/checkout@master

        - name: Get the Private Key from Vault
          uses: Azure/get-keyvault-secrets@v1.0
          with:
            keyvault: ${{github.event.inputs.azure_key_vault_name}}
            secrets: '${{github.event.inputs.vm_admin_private_key_secret_name}}'  # comma separated list of secret keys that need to be fetched from the Key Vault 
          id: getVmAdminPrivateKey

        - name: Show Private Key
          run: |
            echo ${{steps.getVmAdminPrivateKey.outputs}}    

        - name: "DEBUG: STOP WORKFLOW"
          run: exit 1


         
        - name: "TEST: show the create_vm output"
          run: |
            echo "outputs from create_vm:"
            echo "publicIpAddress = ${VM_PUBLIC_IP_ADDRESS}"
            echo "resourceGroupName = ${{needs.create_vm.outputs.resourceGroupName}}"

        - name: Copy bootstrap script
          # https://github.com/garygrossgarten/github-action-scp
          # no error handling: workflow will not fail on error
          uses: garygrossgarten/github-action-scp@release
          with:
            local: ${{env.BOOTSTRAP_SH}}
            remote: bootstrap.sh
            host: ${{env.VM_PUBLIC_IP_ADDRESS}}
            username: ${{env.VM_USER_NAME}}
            password: ${{env.VM_PASSWORD}}
        - name: Execute bootstrap script
          # https://blog.benoitblanchon.fr/github-action-run-ssh-commands/
          uses: garygrossgarten/github-action-ssh@release
          with:
            command: |
              chmod u+x bootstrap.sh
              ./bootstrap.sh
            host: ${{env.VM_PUBLIC_IP_ADDRESS}}
            username: ${{env.VM_USER_NAME}}
            password: ${{env.VM_PASSWORD}}


###
# The End.
