# ---------------------------------------------------------------------------------------------
# MIT License
# Copyright (c) 2020, Solace Corporation, Ricardo Gomez-Ulmke (ricardo.gomez-ulmke@solace.com)
# ---------------------------------------------------------------------------------------------

name: Run Tests
on:
  push:
    branches:
      - feature-wf-test-1
  pull_request: 
    types: [opened, reopened]
    branches:
      - master  
  # TODO: also run tests on new release
# on:
#   workflow_dispatch:
#     inputs:
#       controller_id:
#           description: "unique controller id"
#           required: true
#           default: w1
#       azure_location:
#           description: "azure location / region"
#           required: true
#           default: "westeurope"
#       zone:
#           description: "azure availability zone"
#           required: true
#           default: "1"
#       vm_admin_username:
#           description: "vm admin username"
#           required: true
#           default: "controller"
#       release_tag:
#           description: "release tag number to test, ex. 'v'"
#           required: true
#           default: "0.0.5"
env:

  TEST_CONTROLLER_ID: "wft-azperf"
  TEST_LOCATION: "westeurope"
  TEST_ZONE: "1"
  TEST_VM_ADMIN_USERNAME: "controller"
  TEST_AZURE_PROJECT: "solace-ctrller"
  TEST_AZURE_DEPLOY_ARM_TEMPLATE: "./azure/.workflows/azure-deploy.json"
  TEST_BOOTSTRAP_SH: "./azure/.workflows/bootstrap.sh"

jobs:
  run_tests:
    runs-on: ubuntu-18.04
    outputs:
      publicIpAddress: ${{ steps.azure_deploy.outputs.publicIPAddress }}
      resourceGroupName: ${{ steps.azure_deploy.outputs.resourceGroupName }}

    steps:

      - name: Print test env
        run: |
          env | grep TEST

      - name: Dump GitHub context
        run: |
          echo "entire 'github' object"  
          echo "${{ toJson(github) }}"
      
      - name: Print github env before checkout
        run: |
          pwd
          echo "GITHUB_SHA=$GITHUB_SHA"
          echo "GITHUB_REPOSITORY=$GITHUB_REPOSITORY"
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          echo "GITHUB_REF=$GITHUB_REF"
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}"
          echo "github.token=${{ github.token }}"
      
      - name: Checkout Current Branch
        uses: actions/checkout@master
        with: 
          ref: ${{ github.ref }}

      - name: List Workspace
        run: |
          cd $GITHUB_WORKSPACE
          ls -la 
          cd

      - name: Azure Login
        # https://github.com/marketplace/actions/azure-login
        uses: azure/login@v1.1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}

      - name: Create Azure Resource Group
        run: |
          AZURE_RESOURCE_GROUP="${TEST_CONTROLLER_ID}-${TEST_AZURE_PROJECT}-rg"
          AZURE_PROJECT_TAG="${TEST_CONTROLLER_ID}-${TEST_AZURE_PROJECT}"
          az group create \
            --name $AZURE_RESOURCE_GROUP \
            --location ${TEST_LOCATION} \
            --tags project=$AZURE_PROJECT_TAG \
            --verbose
      
      - name: Run ARM Deploy
        id: azure_deploy
        # https://github.com/marketplace/actions/deploy-azure-resource-manager-arm-template
        uses: azure/arm-deploy@v1.0.1
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: ${{ env.TEST_CONTROLLER_ID }}-${{ env.TEST_AZURE_PROJECT }}-rg
          template: ${{ env.AZURE_DEPLOY_ARM_TEMPLATE }}
          parameters: vm_admin_public_key="${{ secrets.CONTROLLER_VM_PUBLIC_KEY }}" project_prefix=${{ env.TEST_CONTROLLER_ID }}-${{ env.TEST_AZURE_PROJECT }} zone=${{ env.TEST_ZONE }} vm_admin_username=${{ env.TEST_VM_ADMIN_USERNAME }}
      
      - name: DEBUG - end fail
        run: exit 1    
      
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${SSH_KEY}" > ~/.ssh/controller_key
          chmod 600 ~/.ssh/controller_key
          cat >>~/.ssh/config <<END
          Host controller
            HostName ${SSH_HOST}
            User ${SSH_USER}
            IdentityFile ~/.ssh/controller_key
            StrictHostKeyChecking no
          END
          chmod 600 ~/.ssh/config
          # cat ~/.ssh/config
        env:
          SSH_USER: ${{ github.event.inputs.vm_admin_username }}
          SSH_KEY: ${{ secrets.CONTROLLER_VM_PRIVATE_KEY }}
          SSH_HOST: ${{ steps.azure_deploy.outputs.publicIPAddress }}

      - name: Controller - Copy bootstrap script
        # https://github.com/garygrossgarten/github-action-scp
        # no error handling: workflow will not fail on error
        uses: garygrossgarten/github-action-scp@release
        with:
          local: ${{ env.BOOTSTRAP_SH }}
          remote: bootstrap.sh
          host: ${{ steps.azure_deploy.outputs.publicIPAddress }}
          username: ${{ github.event.inputs.vm_admin_username }}
          privateKey: ${{ secrets.CONTROLLER_VM_PRIVATE_KEY }}

      - name: Controller - Set Bootstrap to Executable
        run: |
          ssh controller "chmod u+x bootstrap.sh"

      - name: Controller - Run Bootstrap
        run: |
          ssh controller "./bootstrap.sh > ./bootstrap.sh.log"
      
      # - name: Show Job Outputs
      #   run: |
      #     echo "outputs:"
      #     echo "${{toJson(jobs.create_vm.outputs)}}"

      # - name: "Show azure deploy outputs"
      #   run: |
      #     echo "${{toJson(steps.azure_deploy.outputs)}}"


      - name: Controller - Get Release
        env:
          REPO_NAME: solace-ci-controller
        run: |
          ssh controller "\
              rm -rf ~/release && \
              mkdir -p ~/release && \
              cd ~/release && \
              curl -L https://github.com/solace-iot-team/${REPO_NAME}/archive/v${{ github.event.inputs.release_tag }}.zip --output release.${{ github.event.inputs.release_tag }}.zip  && \
              unzip release.${{ github.event.inputs.release_tag }}.zip    
          "

      - name: TODO - Controller - Bootstrap Tests
        run: |
          echo "run a script which does all the prep, like keys, download solace, etc."

      - name: Controller - Run Infra Setup
        env:
          REPO_NAME: solace-ci-controller
        run: |
          ssh controller "\
              cd ~/release/${REPO_NAME}-* && \
              cd azure/.test/infra && \
              ./run.apply.fg.sh
          "
      # TODO:
      # don't fail but check exit code
      # if not ok: pull down all the log files
      # set artefacts 
      # exit the workflow: run: exit 1

      - name: Controller - ERROR - Infra Setup - Download Logs 
        env:
          REPO_NAME: solace-ci-controller
        run: |
          rm -rf ./remote-logs 
          mkdir -p ./remote-logs
          sftp -p controller:release/solace-ci-controller-${{ github.event.inputs.release_tag }}/azure/.test/infra/logs/* ./remote-logs
      
      # start the test runs
      # download all data
      # the teardown infra

###
# The End.
